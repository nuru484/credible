<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/styles/resultsStyles.css" />
    <title>Strong Room Voting Results</title>
  </head>
  <body>
    <h1>Realtime Voting Results</h1>

    <div id="results">
      <!-- Voting Statistics -->
      <div class="stats">
        <h2>Voting Statistics</h2>
        <p>
          Total Registered Voters: <%= votingStats.total_number_of_voters %>
        </p>
        <p>Voter Participation: <%= votingStats.voter_turnout %></p>
        <p>Non-Participants: <%= votingStats.voter_turnoff %></p>
        <p>Skipped Ballots: <%= votingStats.skipped_votes %></p>
        <p>Total Ballots Submitted: <%= votingStats.total_votes_cast %></p>
      </div>

      <!-- Group the results by position -->
      <% const groupedResults = results.reduce((acc, result) => { if
      (!acc[result.position]) { acc[result.position] = []; }
      acc[result.position].push(result); return acc; }, {}); %>

      <!-- Iterate over each position and display a table -->
      <div class="table-container">
        <% Object.keys(groupedResults).forEach(position => { %>
        <div class="result-section">
          <h2><%= position %></h2>

          <!-- Calculate total votes for the position -->
          <% let totalVotesForPosition = groupedResults[position].reduce((acc,
          result) => acc + result.number_of_votes, 0); %>

          <table>
            <thead>
              <tr>
                <th>Candidate Name</th>
                <th>Number of Votes</th>
                <th>Percentage</th>
              </tr>
            </thead>
            <tbody>
              <% groupedResults[position].forEach(result => { %>
              <tr>
                <td><%= result.candidate_name %></td>
                <td><%= result.number_of_votes %></td>
                <td>
                  <% const percentage = totalVotesForPosition === 0 ? 0 :
                  ((result.number_of_votes / totalVotesForPosition) *
                  100).toFixed(2); %> <%= percentage %>%
                </td>
              </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
        <% }); %>
      </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();

      // Function to update the voting statistics section
      function updateVotingStats(stats) {
        return `
        <div class="stats">
          <h2>Voting Statistics</h2>
          <p>Total Registered Voters: ${stats.total_number_of_voters}</p>
          <p>Voter Participation: ${stats.voter_turnout}</p>
          <p>Non-Participants: ${stats.voter_turnoff}</p>
          <p>Skipped Ballots: ${stats.skipped_votes}</p>
          <p>Total Ballots Submitted: ${stats.total_votes_cast}</p>
        </div>
      `;
      }

      function updateResultsTables(results) {
        const groupedResults = results.reduce((acc, result) => {
          if (!acc[result.position]) {
            acc[result.position] = [];
          }
          acc[result.position].push(result);
          return acc;
        }, {});

        // Define the desired order of positions
        const desiredOrder = [
          'PRESIDENT',
          'AMBASSADOR',
          'GENERAL SECRETARY',
          'WOCOM',
          'FINANCIAL OFFICER',
          'PRO',
          'ENTERTAINMENT SECRETARY',
          'SPORTS SECRETARY',
        ];

        // Sort the positions based on the desired order
        const orderedPositions = Object.keys(groupedResults).sort((a, b) => {
          return desiredOrder.indexOf(a) - desiredOrder.indexOf(b);
        });

        return orderedPositions
          .map((position) => {
            const totalVotesForPosition = groupedResults[position].reduce(
              (acc, result) => acc + (result.number_of_votes || 0),
              0
            );

            return `
        <div class="result-section">
          <h2>${position}</h2>
          <table>
            <thead>
              <tr>
                <th>Candidate Name</th>
                <th>Number of Votes</th>
                <th>Percentage</th>
              </tr>
            </thead>
            <tbody>
              ${groupedResults[position]
                .map((result) => {
                  const percentage =
                    totalVotesForPosition === 0
                      ? 0
                      : (
                          (result.number_of_votes / totalVotesForPosition) *
                          100
                        ).toFixed(2);
                  return `
                    <tr>
                      <td>${result.candidate_name}</td>
                      <td>${result.number_of_votes}</td>
                      <td>${percentage}%</td>
                    `;
                })
                .join('')}
            </tbody>
          </table>
        </div>
      `;
          })
          .join('');
      }

      socket.on('updateResults', (results) => {
        const resultsContainer = document.getElementById('results');
        resultsContainer.innerHTML = '';
        const tableContainer = document.createElement('div');
        tableContainer.classList.add('table-container');
        tableContainer.innerHTML = updateResultsTables(results);
        if (results.length === 0) {
          resultsContainer.innerHTML = '<p>No results available.</p>';
          return;
        }
        const stats = results[1];
        resultsContainer.innerHTML = updateVotingStats(stats);
        resultsContainer.appendChild(tableContainer);
      });
    </script>
  </body>
</html>
